package generic

import (
	"fmt"
	"regexp"
	"strings"

	"github.com/PuerkitoBio/goquery"
	"github.com/postlight/parser-go/pkg/utils/text"
)

// HTML tag removal regex for alternative word counting method
var htmlTagRE = regexp.MustCompile(`<[^>]*>`)

// Multiple whitespace regex for alternative method normalization
var multipleSpacesRE = regexp.MustCompile(`\s+`)

// getWordCount implements the primary word counting method using goquery
func getWordCount(content string) int {
	doc, err := goquery.NewDocumentFromReader(strings.NewReader(content))
	if err != nil {
		return getWordCountAlt(content)
	}

	contentDiv := doc.Find("div").First()
	contentText := contentDiv.Text()
	normalizedText := text.NormalizeSpaces(contentText)
	
	if normalizedText == "" {
		return 1
	}
	
	words := regexp.MustCompile(`\s+`).Split(normalizedText, -1)
	return len(words)
}

// getWordCountAlt implements the alternative/fallback word counting method
func getWordCountAlt(content string) int {
	cleanContent := htmlTagRE.ReplaceAllString(content, " ")
	cleanContent = multipleSpacesRE.ReplaceAllString(cleanContent, " ")
	cleanContent = strings.TrimSpace(cleanContent)
	
	if cleanContent == "" {
		return 1
	}
	
	words := strings.Split(cleanContent, " ")
	return len(words)
}

// Extract function matching the JavaScript API
func Extract(options map[string]interface{}) int {
	if options == nil {
		return 1
	}
	
	contentInterface, exists := options["content"]
	if !exists {
		return 1
	}
	
	content, ok := contentInterface.(string)
	if !ok {
		return 1
	}
	
	count := getWordCount(content)
	
	if count == 1 {
		count = getWordCountAlt(content)
	}
	
	return count
}

// Debug function for manual testing - commented out to avoid build issues
// func debugWordCount() {
//     // Test cases moved to proper test file
// }