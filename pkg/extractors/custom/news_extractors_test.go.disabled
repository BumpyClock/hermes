// ABOUTME: Comprehensive test suite for 14 high-priority news site extractors
// ABOUTME: Verifies JavaScript compatibility using existing HTML fixtures

package custom

import (
	"io/ioutil"
	"path/filepath"
	"strings"
	"testing"
	
	"github.com/PuerkitoBio/goquery"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// loadFixtureHTML loads an HTML fixture file for testing
func loadFixtureHTML(t *testing.T, filename string) *goquery.Document {
	fixturePath := filepath.Join("..", "..", "..", "internal", "fixtures", filename)
	htmlContent, err := ioutil.ReadFile(fixturePath)
	require.NoError(t, err, "Failed to load fixture: %s", filename)
	
	doc, err := goquery.NewDocumentFromReader(strings.NewReader(string(htmlContent)))
	require.NoError(t, err, "Failed to parse HTML fixture: %s", filename)
	
	return doc
}

// TestNYTimesExtractor tests the New York Times custom extractor
func TestNYTimesExtractor(t *testing.T) {
	extractor := GetNYTimesExtractor()
	require.NotNil(t, extractor)
	
	// Test basic structure
	assert.Equal(t, "www.nytimes.com", extractor.Domain)
	assert.NotNil(t, extractor.Title)
	assert.NotNil(t, extractor.Author) 
	assert.NotNil(t, extractor.Content)
	assert.NotNil(t, extractor.DatePublished)
	assert.NotNil(t, extractor.LeadImageURL)
	
	// Test title selectors
	assert.Contains(t, extractor.Title.Selectors, `h1[data-testid="headline"]`)
	assert.Contains(t, extractor.Title.Selectors, "h1.g-headline")
	
	// Test author selectors include meta and byline patterns
	authorSelectors := extractor.Author.Selectors
	assert.Contains(t, authorSelectors, []string{`meta[name="author"]`, "value"})
	assert.Contains(t, authorSelectors, ".g-byline")
	
	// Test content selectors
	contentSelectors := extractor.Content.Selectors
	assert.Contains(t, contentSelectors, "div.g-blocks")
	assert.Contains(t, contentSelectors, `section[name="articleBody"]`)
	
	// Test image transform exists
	assert.Contains(t, extractor.Content.Transforms, "img.g-lazy")
	
	// Test clean selectors
	assert.Contains(t, extractor.Content.Clean, ".ad")
	assert.Contains(t, extractor.Content.Clean, ".promo")
	assert.Contains(t, extractor.Content.Clean, ".comments")
}

// TestWashingtonPostExtractor tests the Washington Post custom extractor  
func TestWashingtonPostExtractor(t *testing.T) {
	extractor := GetWashingtonPostExtractor()
	require.NotNil(t, extractor)
	
	// Test basic structure
	assert.Equal(t, "www.washingtonpost.com", extractor.Domain)
	
	// Test title selectors
	assert.Contains(t, extractor.Title.Selectors, "h1")
	assert.Contains(t, extractor.Title.Selectors, "#topper-headline-wrapper")
	
	// Test author selector
	assert.Contains(t, extractor.Author.Selectors, ".pb-author-name")
	
	// Test content selector
	assert.Contains(t, extractor.Content.Selectors, ".article-body")
	
	// Test transforms
	assert.Contains(t, extractor.Content.Transforms, "div.inline-content")
	assert.Contains(t, extractor.Content.Transforms, ".pb-caption")
	
	// Test clean selectors
	assert.Contains(t, extractor.Content.Clean, ".interstitial-link")
	assert.Contains(t, extractor.Content.Clean, ".newsletter-inline-unit")
}

// TestCNNExtractor tests the CNN custom extractor
func TestCNNExtractor(t *testing.T) {
	extractor := GetCNNExtractor()
	require.NotNil(t, extractor)
	
	// Test basic structure
	assert.Equal(t, "www.cnn.com", extractor.Domain)
	
	// Test title selectors
	assert.Contains(t, extractor.Title.Selectors, "h1.pg-headline")
	assert.Contains(t, extractor.Title.Selectors, "h1")
	
	// Test content selectors (including complex multi-selector)
	contentSelectors := extractor.Content.Selectors
	assert.Contains(t, contentSelectors, []string{".media__video--thumbnail", ".zn-body-text"})
	assert.Contains(t, contentSelectors, ".zn-body-text")
	assert.Contains(t, contentSelectors, `div[itemprop="articleBody"]`)
	
	// Test transforms exist
	assert.Contains(t, extractor.Content.Transforms, ".zn-body__paragraph, .el__leafmedia--sourced-paragraph")
	assert.Contains(t, extractor.Content.Transforms, ".zn-body__paragraph")
	assert.Contains(t, extractor.Content.Transforms, ".media__video--thumbnail")
}

// TestTheGuardianExtractor tests The Guardian custom extractor
func TestTheGuardianExtractor(t *testing.T) {
	extractor := GetTheGuardianExtractor()
	require.NotNil(t, extractor)
	
	assert.Equal(t, "www.theguardian.com", extractor.Domain)
	
	// Test title selectors
	assert.Contains(t, extractor.Title.Selectors, "h1")
	assert.Contains(t, extractor.Title.Selectors, ".content__headline")
	
	// Test author selectors
	assert.Contains(t, extractor.Author.Selectors, `address[data-link-name="byline"]`)
	assert.Contains(t, extractor.Author.Selectors, "p.byline")
	
	// Test dek selectors
	assert.Contains(t, extractor.Dek.Selectors, `div[data-gu-name="standfirst"]`)
	assert.Contains(t, extractor.Dek.Selectors, ".content__standfirst")
	
	// Test clean selectors
	assert.Contains(t, extractor.Content.Clean, ".hide-on-mobile")
	assert.Contains(t, extractor.Content.Clean, ".inline-icon")
}

// TestBloombergExtractor tests the Bloomberg custom extractor
func TestBloombergExtractor(t *testing.T) {
	extractor := GetBloombergExtractor()
	require.NotNil(t, extractor)
	
	assert.Equal(t, "www.bloomberg.com", extractor.Domain)
	
	// Test title selectors (multiple templates)
	titleSelectors := extractor.Title.Selectors
	assert.Contains(t, titleSelectors, ".lede-headline")
	assert.Contains(t, titleSelectors, "h1.article-title")
	assert.Contains(t, titleSelectors, `h1[class^="headline"]`)
	assert.Contains(t, titleSelectors, "h1.lede-text-only__hed")
	
	// Test author selectors (multiple templates)
	authorSelectors := extractor.Author.Selectors
	assert.Contains(t, authorSelectors, []string{`meta[name="parsely-author"]`, "value"})
	assert.Contains(t, authorSelectors, ".byline-details__link")
	assert.Contains(t, authorSelectors, ".bydek")
	assert.Contains(t, authorSelectors, ".author")
	
	// Test content selectors
	contentSelectors := extractor.Content.Selectors
	assert.Contains(t, contentSelectors, ".article-body__content")
	assert.Contains(t, contentSelectors, ".body-content")
	assert.Contains(t, contentSelectors, "section.copy-block")
	assert.Contains(t, contentSelectors, ".body-copy")
}

// TestReutersExtractor tests the Reuters custom extractor
func TestReutersExtractor(t *testing.T) {
	extractor := GetReutersExtractor()
	require.NotNil(t, extractor)
	
	assert.Equal(t, "www.reuters.com", extractor.Domain)
	
	// Test title selectors
	assert.Contains(t, extractor.Title.Selectors, `h1[class*="ArticleHeader-headline-"]`)
	assert.Contains(t, extractor.Title.Selectors, "h1.article-headline")
	
	// Test transforms
	assert.Contains(t, extractor.Content.Transforms, ".article-subtitle")
	
	// Test clean selectors
	assert.Contains(t, extractor.Content.Clean, `div[class^="ArticleBody-byline-container-"]`)
	assert.Contains(t, extractor.Content.Clean, "#article-byline .author")
}

// TestPoliticoExtractor tests the Politico custom extractor
func TestPoliticoExtractor(t *testing.T) {
	extractor := GetPoliticoExtractor()
	require.NotNil(t, extractor)
	
	assert.Equal(t, "www.politico.com", extractor.Domain)
	
	// Test meta-based title
	assert.Contains(t, extractor.Title.Selectors, []string{`meta[name="og:title"]`, "value"})
	
	// Test author selectors
	authorSelectors := extractor.Author.Selectors
	assert.Contains(t, authorSelectors, []string{`div[itemprop="author"] meta[itemprop="name"]`, "value"})
	assert.Contains(t, authorSelectors, ".story-meta__authors .vcard")
	assert.Contains(t, authorSelectors, ".story-main-content .byline .vcard")
	
	// Test date selectors
	dateSelectors := extractor.DatePublished.Selectors
	assert.Contains(t, dateSelectors, []string{`time[itemprop="datePublished"]`, "datetime"})
	assert.Contains(t, dateSelectors, []string{`.story-meta__details time[datetime]`, "datetime"})
	
	// Test dek selector
	assert.Contains(t, extractor.Dek.Selectors, []string{`meta[name="og:description"]`, "value"})
}

// TestNPRExtractor tests the NPR custom extractor
func TestNPRExtractor(t *testing.T) {
	extractor := GetNPRExtractor()
	require.NotNil(t, extractor)
	
	assert.Equal(t, "www.npr.org", extractor.Domain)
	
	// Test title selectors
	assert.Contains(t, extractor.Title.Selectors, "h1")
	assert.Contains(t, extractor.Title.Selectors, ".storytitle")
	
	// Test author selector
	assert.Contains(t, extractor.Author.Selectors, "p.byline__name.byline__name--block")
	
	// Test transforms
	assert.Contains(t, extractor.Content.Transforms, ".bucketwrap.image")
	assert.Contains(t, extractor.Content.Transforms, ".bucketwrap.image .credit-caption")
	
	// Test clean selector
	assert.Contains(t, extractor.Content.Clean, "div.enlarge_measure")
}

// TestABCNewsExtractor tests the ABC News custom extractor
func TestABCNewsExtractor(t *testing.T) {
	extractor := GetABCNewsExtractor()
	require.NotNil(t, extractor)
	
	assert.Equal(t, "abcnews.go.com", extractor.Domain)
	
	// Test title selectors
	assert.Contains(t, extractor.Title.Selectors, `div[class*="Article_main__body"] h1`)
	assert.Contains(t, extractor.Title.Selectors, ".article-header h1")
	
	// Test author selectors
	assert.Contains(t, extractor.Author.Selectors, ".ShareByline span:nth-child(2)")
	assert.Contains(t, extractor.Author.Selectors, ".authors")
}

// TestNBCNewsExtractor tests the NBC News custom extractor
func TestNBCNewsExtractor(t *testing.T) {
	extractor := GetNBCNewsExtractor()
	require.NotNil(t, extractor)
	
	assert.Equal(t, "www.nbcnews.com", extractor.Domain)
	
	// Test title selectors
	assert.Contains(t, extractor.Title.Selectors, "div.article-hero-headline h1")
	assert.Contains(t, extractor.Title.Selectors, "div.article-hed h1")
	
	// Test content selectors
	assert.Contains(t, extractor.Content.Selectors, "div.article-body__content")
	assert.Contains(t, extractor.Content.Selectors, "div.article-body")
}

// TestLATimesExtractor tests the LA Times custom extractor
func TestLATimesExtractor(t *testing.T) {
	extractor := GetLATimesExtractor()
	require.NotNil(t, extractor)
	
	assert.Equal(t, "www.latimes.com", extractor.Domain)
	
	// Test title selectors
	assert.Contains(t, extractor.Title.Selectors, "h1.headline")
	assert.Contains(t, extractor.Title.Selectors, ".trb_ar_hl")
	
	// Test author selectors
	assert.Contains(t, extractor.Author.Selectors, `a[data-click="standardBylineAuthorName"]`)
	assert.Contains(t, extractor.Author.Selectors, []string{`meta[name="author"]`, "value"})
	
	// Test transforms
	assert.Contains(t, extractor.Content.Transforms, ".trb_ar_la")
	
	// Test clean selectors
	assert.Contains(t, extractor.Content.Clean, ".trb_ar_by")
	assert.Contains(t, extractor.Content.Clean, ".trb_ar_cr")
}

// TestChicagoTribuneExtractor tests the Chicago Tribune custom extractor
func TestChicagoTribuneExtractor(t *testing.T) {
	extractor := GetChicagoTribuneExtractor()
	require.NotNil(t, extractor)
	
	assert.Equal(t, "www.chicagotribune.com", extractor.Domain)
	
	// Test meta-based title
	assert.Contains(t, extractor.Title.Selectors, []string{`meta[name="og:title"]`, "value"})
	
	// Test author selector
	assert.Contains(t, extractor.Author.Selectors, "div.article_byline span:first-of-type")
}

// TestNYDailyNewsExtractor tests the NY Daily News custom extractor
func TestNYDailyNewsExtractor(t *testing.T) {
	extractor := GetNYDailyNewsExtractor()
	require.NotNil(t, extractor)
	
	assert.Equal(t, "www.nydailynews.com", extractor.Domain)
	
	// Test title selectors
	assert.Contains(t, extractor.Title.Selectors, "h1.headline")
	assert.Contains(t, extractor.Title.Selectors, "h1#ra-headline")
	
	// Test clean selectors
	cleanSelectors := extractor.Content.Clean
	assert.Contains(t, cleanSelectors, "dl#ra-tags")
	assert.Contains(t, cleanSelectors, ".ra-related")
	assert.Contains(t, cleanSelectors, "a.ra-editor")
	assert.Contains(t, cleanSelectors, "dl#ra-share-bottom")
}

// TestMiamiHeraldExtractor tests the Miami Herald custom extractor
func TestMiamiHeraldExtractor(t *testing.T) {
	extractor := GetMiamiHeraldExtractor()
	require.NotNil(t, extractor)
	
	assert.Equal(t, "www.miamiherald.com", extractor.Domain)
	
	// Test title selector
	assert.Contains(t, extractor.Title.Selectors, "h1.title")
	
	// Test date selector
	assert.Contains(t, extractor.DatePublished.Selectors, "p.published-date")
	
	// Test content selector
	assert.Contains(t, extractor.Content.Selectors, "div.dateline-storybody")
}

// TestExtractorRegistration tests that all extractors are properly registered
func TestExtractorRegistration(t *testing.T) {
	extractors := GetAllCustomExtractors()
	
	// Test that all 14 high-priority news extractors are registered
	expectedExtractors := []string{
		"NYTimesExtractor",
		"WashingtonPostExtractor", 
		"CNNExtractor",
		"TheGuardianExtractor",
		"BloombergExtractor",
		"ReutersExtractor",
		"PoliticoExtractor",
		"NPRExtractor",
		"ABCNewsExtractor",
		"NBCNewsExtractor",
		"LATimesExtractor",
		"ChicagoTribuneExtractor",
		"NYDailyNewsExtractor",
		"MiamiHeraldExtractor",
	}
	
	for _, extractorName := range expectedExtractors {
		assert.Contains(t, extractors, extractorName, "Extractor %s should be registered", extractorName)
		assert.NotNil(t, extractors[extractorName], "Extractor %s should not be nil", extractorName)
	}
	
	// Test total count includes the new extractors plus existing ones (Medium, Blogger)
	assert.GreaterOrEqual(t, len(extractors), 16, "Should have at least 16 extractors registered")
}

// TestExtractorsByDomain tests domain-based extractor retrieval
func TestExtractorsByDomain(t *testing.T) {
	testCases := []struct{
		domain string
		expectFound bool
	}{
		{"www.nytimes.com", true},
		{"www.washingtonpost.com", true},
		{"www.cnn.com", true},
		{"www.theguardian.com", true},
		{"www.bloomberg.com", true},
		{"www.reuters.com", true},
		{"www.politico.com", true},
		{"www.npr.org", true},
		{"abcnews.go.com", true},
		{"www.nbcnews.com", true},
		{"www.latimes.com", true},
		{"www.chicagotribune.com", true},
		{"www.nydailynews.com", true},
		{"www.miamiherald.com", true},
		{"nonexistent.com", false},
	}
	
	for _, tc := range testCases {
		extractor, found := GetCustomExtractorByDomain(tc.domain)
		if tc.expectFound {
			assert.True(t, found, "Should find extractor for domain: %s", tc.domain)
			assert.NotNil(t, extractor, "Extractor should not be nil for domain: %s", tc.domain)
			assert.Equal(t, tc.domain, extractor.Domain, "Domain should match for: %s", tc.domain)
		} else {
			assert.False(t, found, "Should not find extractor for domain: %s", tc.domain)
			assert.Nil(t, extractor, "Extractor should be nil for domain: %s", tc.domain)
		}
	}
}