// ABOUTME: Refinery29 custom extractor for fashion with product integration
// ABOUTME: 100% JavaScript-compatible port of src/extractors/custom/www.refinery29.com/index.js

package custom

import (
	"github.com/PuerkitoBio/goquery"
)

// Refinery29CustomExtractor provides the custom extraction rules for www.refinery29.com
// JavaScript equivalent: export const WwwRefinery29ComExtractor = { ... }
var Refinery29CustomExtractor = &CustomExtractor{
	Domain: "www.refinery29.com",
	
	Title: &FieldExtractor{
		Selectors: []interface{}{
			"h1.title",
		},
	},
	
	Author: &FieldExtractor{
		Selectors: []interface{}{
			".contributor",
		},
	},
	
	DatePublished: &FieldExtractor{
		Selectors: []interface{}{
			[]string{"meta[name=\"sailthru.date\"]", "value"},
		},
	},
	
	LeadImageURL: &FieldExtractor{
		Selectors: []interface{}{
			[]string{"meta[name=\"og:image\"]", "value"},
		},
	},
	
	Content: &ContentExtractor{
		FieldExtractor: &FieldExtractor{
			Selectors: []interface{}{
				[]string{".full-width-opener", ".article-content"},
				".article-content",
				".body",
			},
		},
		
		// Transform functions for Refinery29-specific content
		Transforms: map[string]TransformFunction{
			"div.loading noscript": &FunctionTransform{
				Fn: transformRefinery29LoadingImages,
			},
			".section-image": &StringTransform{TargetTag: "figure"},
			".section-image .content-caption": &StringTransform{TargetTag: "figcaption"},
			".section-text": &StringTransform{TargetTag: "p"},
		},
		
		// Clean selectors - remove unwanted elements
		Clean: []string{
			".story-share",
		},
	},
	
	// No selectors in original JavaScript for these fields
	Dek: &FieldExtractor{
		Selectors: []interface{}{},
	},
	
	NextPageURL: &FieldExtractor{
		Selectors: []interface{}{},
	},
	
	Excerpt: &FieldExtractor{
		Selectors: []interface{}{},
	},
}

// transformRefinery29LoadingImages handles lazy-loaded images in noscript tags
// JavaScript equivalent: 'div.loading noscript': $node => { ... }
func transformRefinery29LoadingImages(selection *goquery.Selection) error {
	// Get the inner HTML from noscript
	imgHtml, err := selection.Html()
	if err != nil {
		return nil
	}
	
	// Find the parent .loading element and replace it with the img HTML
	loadingParent := selection.Parents(".loading").First()
	if loadingParent.Length() > 0 {
		loadingParent.ReplaceWithHtml(imgHtml)
	}
	
	return nil
}

// GetRefinery29Extractor returns the Refinery29 custom extractor
func GetRefinery29Extractor() *CustomExtractor {
	return Refinery29CustomExtractor
}